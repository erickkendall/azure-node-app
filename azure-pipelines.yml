# Azure DevOps Pipeline for Node.js App
# This pipeline builds and deploys the Node.js application to Azure App Service

trigger:
- main
- develop

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Node.js version to use
  nodeVersion: '18.x'
  # Build configuration
  buildConfiguration: 'Release'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    displayName: 'Build Job'
    steps:
    
    # Install Node.js
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js $(nodeVersion)'
    
    # Display Node and npm versions
    - script: |
        node --version
        npm --version
      displayName: 'Display Node.js and npm versions'
    
    # Install dependencies
    - script: |
        npm ci
      displayName: 'Install dependencies'
      
    # Run tests (if you have any)
    - script: |
        npm run test
      displayName: 'Run tests'
      continueOnError: true
    
    # Run build
    - script: |
        npm run build
      displayName: 'Build application'
    
    # Copy files to staging directory
    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(System.DefaultWorkingDirectory)'
        contents: |
          **/*
          !node_modules/**/*
          !.git/**/*
          !.gitignore
          !azure-pipelines.yml
          !README.md
        targetFolder: '$(Build.ArtifactStagingDirectory)'
      displayName: 'Copy application files'
    
    # Create package.json in staging for production dependencies
    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(System.DefaultWorkingDirectory)'
        contents: |
          package.json
          package-lock.json
        targetFolder: '$(Build.ArtifactStagingDirectory)'
        overWrite: true
      displayName: 'Copy package files'

    # Archive files
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true
        verbose: true
      displayName: 'Archive application'

    # Publish build artifacts
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      displayName: 'Publish build artifact'

# Optional: Add deployment stage (uncomment and configure as needed)
# - stage: Deploy
#   displayName: 'Deploy Stage'
#   dependsOn: Build
#   condition: succeeded()
#   jobs:
#   - deployment: DeployJob
#     displayName: 'Deploy to Azure App Service'
#     environment: 'production'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureWebApp@1
#             inputs:
#               azureSubscription: 'your-service-connection-name'
#               appType: 'webAppLinux'
#               appName: 'your-app-service-name'
#               package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
#               runtimeStack: 'NODE|18-lts'
#               startUpCommand: 'npm start'
